{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "oak",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#singleStrings"
		},
		{
			"include": "#doubleStrings"
		},
		{
			"include": "#storage"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#blockComments"
		},
		{
			"include": "#lineComments"
		},
		{
			"include": "#poundComments"
		}
	],
	"repository": {
		"blockComments": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block.oak",
			"patterns": [
				{
					"match": "\\@\\w+",
					"name": "keyword.other.doxygen.oak"
				},
				{
					"match": "TODO|NOTE",
					"name": "keyword.other.doxygen.oak"
				},
				{
					"include": "#blockComments"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "\\b[0-9\\.]\\w*\\b",
					"name": "constant.numeric.oak"
				}
			]
		},
		"doubleStrings": {
			"begin": "\"",
			"end": "\"",
			"name": "string.quoted.double.oak",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.oak"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\b(if|else|while|match|case|return)\\b",
					"name": "keyword.control.oak"
				},
				{
					"match": "\\b(let|true|false|pre|post|_|self)\\b",
					"name": "keyword.other.oak"
				}
			]
		},
		"lineComments": {
			"patterns": [
				{
					"match": "//.*",
					"name": "comment.line.double-slash.oak"
				}
			]
		},
		"poundComments": {
			"patterns": [
				{
					"match": "#.*",
					"name": "comment.line.number-sign.oak"
				}
			]
		},
		"singleStrings": {
			"begin": "'",
			"end": "'",
			"name": "string.quoted.single.oak",
			"patterns": [
				{
					"match": "\\\\.",
					"name": "constant.character.escape.oak"
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"match": "\\b(struct|enum|u?int|float|bool|void|f(32|64|128)|[ui](8|16|32|64|128))\\b",
					"name": "storage.type.oak"
				},
				{
					"match": "([A-Z][a-z]*)+",
					"name": "entity.name.class.oak"
				},
				{
					"match": "[a-z_][a-z0-9_]*!?(?=\\(|<)",
					"name": "entity.name.function"
				},
				{
					"match": "\\w+(?=::)",
					"name": "entity.name.namespace"
				},
				{
					"match": "[a-z_][a-z0-9_]*(\\.)?\\b",
					"name": "variable.name.oak"
				}
			]
		}
	},
	"scopeName": "source.oak"
}